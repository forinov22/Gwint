@inject IJSRuntime JSRuntime
@implements IAsyncDisposable


<div class="modal-overlay">
    <div class="modal-content">
        @if (!CardModal)
        {
        <h3>@Title</h3>
        @if (Scrollable)
        {
            <div class="modal-body @BodyClass" @onmousewheel="OnWheelScroll">
                @ChildContent
            </div>
        }
        else
        {
            <div class="modal-body @BodyClass">
                @ChildContent
            </div>
            }
        }
        else
        {
            @ChildContent
        }
        <button @onclick="CloseModal">Close</button>
    </div>
    </div>

@code {
    private IJSObjectReference? _module;

    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    [Parameter] public string BodyClass { get; set; } = string.Empty;
    [Parameter] public bool Scrollable { get; set; }
    [Parameter] public bool CardModal { get; set; } = false;

    private async Task CloseModal()
    {
        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync();
        }
    }
    
    private async Task OnWheelScroll(MouseEventArgs e)
    {
        var container = await JSRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", ".card-selection-modal-body");
        var direction = e.ShiftKey;
        
        if (_module is not null)
        {
            await _module.InvokeVoidAsync("scrollElement", container, 20, direction);
        }
        
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/game.js");
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_module is not null)
        {
            await _module.DisposeAsync();
        }
    }
}