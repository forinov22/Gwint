@using Gwint.Lib
@inject IJSRuntime JS
<div class="@(OpponentHandDeck ? "opponent-deck" : "unit-row")" id="@(OpponentHandDeck ? "" : @RowId)">
    @if (Cards is not null && Cards.Any())
    {
        foreach (var card in Cards)
        {
            <div class="unit-card-wrapper"
                 draggable="true"
                 id="card-@card.Id">
                <div class="unit-card @(OwnHandDeck ? "hand own" : "") @(OpponentHandDeck ? "hand opponent" : "")" @onclick="() => SelectCard(card)">
                    @if (OpponentHandDeck)
                    {
                        <img src="/card-images/back.png" alt="Opponent Card" class="card-back" />
                    }
                    else if (OwnHandDeck)
                    {
                        <img src="@card.ImageUrl" alt="@card.Name" />
                    }
                    else
                    {
                        <div class="front">
                            <img src="@card.ImageUrl" alt="@card.Name" />
                        </div>
                        <div class="back">
                            @if (card is UnitCard unitCard)
                            {
                                <div class="strength-indicator">
                                    @if (unitCard.CurrentStrength < unitCard.InitialStrength)
                                    {
                                        <span>
                                            <img src="/card-images/debuff.png" class="buff-debuff-icon" alt="Debuff" />
                                        </span>
                                    }
                                    else if (unitCard.CurrentStrength > unitCard.InitialStrength)
                                    {
                                        <span>
                                            <img src="/card-images/buff.png" class="buff-debuff-icon" alt="Buff" />
                                        </span>
                                    }
                                </div>
                            }
                            <img src="@card.ImageUrl" alt="@card.Name" />

                        </div>
                    }
                    @if (!OpponentHandDeck)
                    {
                        <div class="card-name">
                            @card.Name
                        </div>
                    }
                </div>
                
            </div>
        }
    }
</div>
<script>
    
</script>

@code {
    [Parameter] public IEnumerable<Card>? Cards { get; set; } = [];
    [Parameter] public EventCallback<string> OnCardSelected { get; set; }
    [Parameter] public string RowId { get; set; }
    [Parameter] public bool OpponentHandDeck { get; set; } = false;
    [Parameter] public bool OwnHandDeck { get; set; } = false;
    private ElementReference _wrapperRef;
    private string CardStyle = "position: absolute; top: 0px; left: 0px;";
    private bool IsDragging = false;
    private Card? selectedCard;
    private IJSObjectReference _module;

    protected override async Task OnParametersSetAsync()
    {
        int currentCardCount = Cards?.Count() ?? 0;


        if (_module != null)
        {
            await _module.InvokeVoidAsync("rotateOwnCards");
            await _module.InvokeVoidAsync("rotateOpponentCards");
            await _module.InvokeVoidAsync("initializeCardEvents");
        }
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            _module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/game.js");
            
            
            // await InitializeDragAndDrop();
        }
        if(_module != null){
            await _module.InvokeVoidAsync("rotateOwnCards");
            await _module.InvokeVoidAsync("rotateOpponentCards");
        }
    }

    private void StartDrag(MouseEventArgs e)
    {
        IsDragging = true;
    }

    private void StopDrag(MouseEventArgs e)
    {
        IsDragging = false;

        if (IsDroppedOnField(e))
        {
            OnCardSelected.InvokeAsync(selectedCard.Id); 
        }
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        if (IsDragging)
        {
            CardStyle = $"position: absolute; top: {e.ClientY}px; left: {e.ClientX}px;";
            StateHasChanged();
        }
    }

    private bool IsDroppedOnField(MouseEventArgs e)
    {
        return e.ClientY > 100;
    }
    private void SelectCard(Card card)
    {
        selectedCard = card;
        OnCardSelected.InvokeAsync(card.Id);
    }

    private void DeselectCard()
    {
        selectedCard = null;
        StateHasChanged();
    }

    private string GetCardDescription(Card card)
    {
        return card is UnitCard unitCard
            ? $"Strentgh: {unitCard.CurrentStrength}, Initital strength: {unitCard.InitialStrength}"
            : "...";
    }
}
