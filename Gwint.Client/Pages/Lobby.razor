@page "/"
@using Gwint.Client.Services
@using Gwint.Contracts
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject GameRoomService GameRoomService
@inject NavigationManager Navigation

<div class="lobby-container">
    <h3 class="lobby-header">Available Game Rooms</h3>
    <ul class="room-list">
        @foreach (var room in _rooms)
        {
            <li class="room-item">
                <span class="room-id">Room ID: @room.Id</span>
                <button class="btn join-btn" @onclick="() => SelectRoom(room)">Join Room</button>
            </li>
        }
    </ul>

    <div class="create-room-container">
        <button class="btn create-room-btn" @onclick="ClickCreateRoom">Create Room</button>
    </div>

    @if (_showCreateRoomForm)
    {
        <div class="create-room-form">
            <h3>Create Room</h3>
            <input class="input-field" @bind="_userName" placeholder="Enter your name" />
            <button class="btn submit-btn" @onclick="CreateRoom">Create</button>
        </div>
    }

    @if (_showJoinRoomForm)
    {
        <div class="join-room-form">
            <h3>Join Room: @_selectedRoom?.Id</h3>
            <input class="input-field" @bind="_userName" placeholder="Enter your name" />
            <button class="btn submit-btn" @onclick="JoinSelectedRoom">Join</button>
        </div>
    }
</div>

@code {
    private bool _showCreateRoomForm;
    private bool _showJoinRoomForm;
    private string _userName = string.Empty;
    private GameRoomDto? _selectedRoom;
    private List<GameRoomDto> _rooms = [];
    private IJSObjectReference _module = null!;

    protected override async Task OnInitializedAsync()
    {
        _module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/game.js");
        await _module.InvokeVoidAsync("changeFavicon", "favicon.ico");
        GameRoomService.OnRoomsUpdated += rooms =>
        {
            _rooms = rooms;
            StateHasChanged();
        };
        
        await GameRoomService.StartAsync();

        _rooms = await GameRoomService.GetAllRooms();
    }

    private void ClickCreateRoom()
    {
        _showCreateRoomForm = true;
    }

    private async Task CreateRoom()
    {
        if (!string.IsNullOrEmpty(_userName))
        {
            GameRoomDto room = await GameRoomService.CreateRoom(_userName);
            Navigation.NavigateTo($"/game/{room.Id}");
        }
    }

    private void SelectRoom(GameRoomDto room)
    {
        _selectedRoom = room;
        _showJoinRoomForm = true;
    }

    private async Task JoinSelectedRoom()
    {
        if (!string.IsNullOrEmpty(_userName) && _selectedRoom != null)
        {
            await GameRoomService.JoinRoom(_selectedRoom.Id, _userName);
            Navigation.NavigateTo($"/game/{_selectedRoom.Id}?showAcceptGameForm=true");
        }
    }

    public async ValueTask DisposeAsync()
    {
        await GameRoomService.DisposeAsync();
    }
}