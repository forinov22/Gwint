@page "/game/{roomId}"

@using System.Text.Json
@using Gwint.Api.DTOs
@using Gwint.Client.Services
@using Gwint.Contracts
@using Gwint.Lib
@using Gwint.Client.Components
@using Gwint.Client.Components.UI
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject GameRoomService GameRoomService
@inject GameRoomState GameRoomState

@if (_room is null)
{
    <div>Loading...</div>
    return;
}

<div class="last-played-card-overlay" style="display: @(ShowLastPlayedCard ? "flex" : "none")">
    <div class="last-played-card-content">
        @if (LastPlayedCard is not null)
        {
        <div>
            <h3>@(_room.GameState.IsPlayerTurn ? _room.GameState.Opponent.Name : _room.GameState.Player.Name)</h3>
            <div class="last-played-card">
                <img src="@LastPlayedCard.ImageUrl" alt="@LastPlayedCard.Name" />
            </div>
        </div>
        }
        else
        {
        <div>
            <h3>@(_room.GameState.IsPlayerTurn ? _room.GameState.Opponent.Name : _room.GameState.Player.Name)</h3>
            <p>Skipped their turn</p>
        </div>
        }
    </div>
</div>

<div class="game-area">
    <div class="game-info">
        @if (_room.GameState.Opponent is not null)
        {
            <PlayerInfo 
                Name="@_room.GameState.Opponent.Name"
                DeckName="@_room.GameState.Opponent.Deck?.DeckType.ToString()"
                CardsInHand="@_room.GameState.Opponent.Deck?.CardsInHand"
                RoundWins="@_room.GameState.GameScore.OpponentRoundWins"
                TotalScore="@_room.GameState.GameScore.OpponentTotalScore"
                AvatarClass="opponent-avatar"/>
            @if (_isOpponentAccepted)
            {
                <div class="opponent-accepted">Opponent accepted</div>
            }
            @if (_isOpponentSelectedDeck)
            {
                <div class="opponent-selected-deck">Opponent selected deck: @_opponentDeck.ToString()</div>
            }
        }
        @if (_room.GameState.GameStatus == GameStatus.InProcess)
        {
            <WeatherCardRow Cards="@_room?.GameState.WeatherCards.ToList()" OnCardSelected="@HandleWeatherCardClick" />
        }
        <PlayerInfo
            Name="@_room.GameState.Player.Name"
            DeckName="@_room.GameState.Player.Deck?.DeckType.ToString()"
            CardsInHand="@_room.GameState.Player.Deck?.Hand.Count"
            RoundWins="@_room.GameState.GameScore.PlayerRoundWins"
            TotalScore="@_room.GameState.GameScore.PlayerTotalScore"/>
        @if (_showAcceptGameForm)
        {
            <div class="accept-game-form">
                <button @onclick="AcceptGame">Accept</button>
            </div>
        }
        @if (_showSelectDeckForm)
        {
            <DeckSelectionForm 
                DeckTypes="new [] { DeckType.Nilfgaardian, DeckType.Northern }"
                OnDeckSelected="SelectDeck"/>
        }
        @if (_room.GameState.GameStatus == GameStatus.InProcess || _room.GameState.GameStatus == GameStatus.RoundEnded)
        {
            <div class="end-round">
                <button @onclick="EndRound">End Round</button>
            <div>Turn: @(_room.GameState.IsPlayerTurn ? "yours" : "opponent")</div>
        </div>
        }
        
    </div>
    
    <div class="game-action">
        <UnitRow Cards="_room.GameState.Player.Deck?.Hand"
                 OpponentHandDeck="true"
                 RowId="hand-row" />
        <UnitRow Opponent="true" RowAffected="_room.GameState.WeatherRowsAffected.Count == 0 ? false : _room.GameState.WeatherRowsAffected[2]" Cards="_room.GameState.Opponent?.Deck?.PlayedCards.Where(c => c.UnitRange == UnitRange.Siege)" RowId="siege-row" />
        <UnitRow Opponent="true" RowAffected="_room.GameState.WeatherRowsAffected.Count == 0 ? false : _room.GameState.WeatherRowsAffected[1] " Cards="_room.GameState.Opponent?.Deck?.PlayedCards.Where(c => c.UnitRange == UnitRange.Ranged)" RowId="ranged-row" />
        <UnitRow Opponent="true" RowAffected="_room.GameState.WeatherRowsAffected.Count == 0 ? false : _room.GameState.WeatherRowsAffected[0] " Cards="_room.GameState.Opponent?.Deck?.PlayedCards.Where(c => c.UnitRange == UnitRange.Melee)" RowId="melee-row" />



        <UnitRow RowAffected="_room.GameState.WeatherRowsAffected.Count == 0 ? false : _room.GameState.WeatherRowsAffected[0]" Cards="_room.GameState.Player.Deck?.PlayedCards.Where(c => c.UnitRange == UnitRange.Melee)"
                 UnitRange="@UnitRange.Melee.ToString()"
                 RowId="melee-row"
                 SelectedRange="@(selectedRange == UnitRange.Melee)" />
        <UnitRow RowAffected="_room.GameState.WeatherRowsAffected.Count == 0 ? false : _room.GameState.WeatherRowsAffected[1]" Cards="_room.GameState.Player.Deck?.PlayedCards.Where(c => c.UnitRange == UnitRange.Ranged)"
                 UnitRange="@UnitRange.Ranged.ToString()"
                 RowId="ranged-row"
                 SelectedRange="@(selectedRange == UnitRange.Ranged)" />
        <UnitRow RowAffected="_room.GameState.WeatherRowsAffected.Count == 0 ? false : _room.GameState.WeatherRowsAffected[2]" Cards="_room.GameState.Player.Deck?.PlayedCards.Where(c => c.UnitRange == UnitRange.Siege)"
                 UnitRange="@UnitRange.Siege.ToString()"
                 RowId="siege-row"
                 SelectedRange="@(selectedRange == UnitRange.Siege)" />
            <UnitRow Cards="_room.GameState.Player.Deck?.Hand"
                     OnCardSelected="MakeMove"
                     OwnHandDeck="true"
                     RowId="hand-row" 
                     TargetRow="HandleDragStart"
                     ObjectReference="@_objectReference"/>
       
        

        @if (_isModalVisible)
        {
            <Modal
                Title="Select Target Card"
                OnClose="CloseModal"
                BodyClass="card-selection-modal-body"
                Scrollable="true">
                <UnitRow
                    Cards="_modalCards"
                    OnCardSelected="SelectTargetCard"
                    Modal="true"/>
            </Modal>
        }

        @if (_isErrorModalVisible)
        {
            <Modal Title="You can't do this move now!"
                   OnClose="@(() => {_isErrorModalVisible = false;})"
                   BodyClass="card-selection-modal-body">
            </Modal>
        }

        @if (_isWeatherModalVisible)
        {
            <Modal CardModal="@true"
                Title="@_weatherModalTitle"
                OnClose="() => _isWeatherModalVisible = false">
                
                @* <WeatherCardComponent Cards="@_modalWeatherCard" OnCardSelected="@HandleWeatherCardClick" Title="@true"/> *@

            </Modal>
        }
    </div>
</div>

@if (_showRoundEndedModal)
{
    <Modal Title="Round Ended" OnClose="CloseRoundEndedModal">
        <p>The winner of this round is: <strong>@_roundWinner</strong></p>
    </Modal>
}

@if (_showGameEndedModal)
{
    <Modal Title="Game Ended">
        <p>The winner of the game is: <strong>@_gameWinner</strong></p>
    </Modal>
}

@code {
    private bool _showAcceptGameForm;
    private bool _isOpponentAccepted;

    private bool _showSelectDeckForm;
    private DeckType _selectedDeckType;
    private bool _isOpponentSelectedDeck;
    private DeckType _opponentDeck;

    private string? _currentPlayedCardId;
    private bool _isModalVisible = false;
    private string _modalTitle = string.Empty;
    private List<Card> _modalCards = [];

    // private WeatherCard weatherCard = new WeatherCard("Frost", "/card-images/frost.png", WeatherType.Frost);
    private List<WeatherCard> weatherCards = [];
    private List<WeatherCard>? _modalWeatherCard;
    private bool _isWeatherModalVisible = false;
    private string _weatherModalTitle = string.Empty;

    private UnitRange? selectedRange;

    private bool _showRoundEndedModal;
    private bool _showGameEndedModal;
    private string? _roundWinner;
    private string? _gameWinner;

    private bool _isErrorModalVisible = false;

    private bool ShowLastPlayedCard;
    private Card? LastPlayedCard;
    private string LastPlayedBy = string.Empty;

    private bool _isOpponentSkipped;
    private bool _isPlayerSkipped;

    private DotNetObjectReference<GameRoom> _objectReference;

    private IJSObjectReference _module = null!;


    private GameRoomDto _room = null!;

    [Parameter] public string RoomId { get; set; } = string.Empty;


    public async Task CardDropped(string cardId, string targetRowId)
    {
        var card = _room.GameState.Player.Deck.Hand.FirstOrDefault(c => c.Id == cardId);
        if (card is null)
            return;
        await MakeMove(cardId);

        await InvokeAsync(StateHasChanged);
    }

    private async Task InitializeDragAndDrop()
    {
        _module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/game.js");

        await _module.InvokeVoidAsync("initializeDragAndDrop", "card-", "play-zone", "deck-zone");
    }

    protected override async Task OnInitializedAsync()
    {
        _module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/game.js");
        await _module.InvokeVoidAsync("changeFavicon", "swords.png");
        _objectReference = DotNetObjectReference.Create(this);
        if (GameRoomState.CurrentRoom is null)
        {
            return;
        }

        _room = GameRoomState.CurrentRoom;

        GameRoomService.OnOpponentJoined += opponent =>
        {
            _showAcceptGameForm = true;
            _room = new GameRoomDto(_room.Id, _room.IsFree, new PlayerGameStateDto(_room.GameState.Player, opponent, _room.GameState.GameScore, _room.GameState.GameStatus, _room.GameState.IsPlayerTurn, null, [], [false, false, false]));
            StateHasChanged();
        };

        GameRoomService.OnOpponentAccepted += () =>
        {
            _isOpponentAccepted = true;
            StateHasChanged();
        };

        GameRoomService.OnDeckSelectStarted += () =>
        {
            _isOpponentAccepted = false;
            _showSelectDeckForm = true;
            StateHasChanged();
        };

        GameRoomService.OnOpponentSelectedDeck += deckType =>
        {
            _isOpponentSelectedDeck = true;
            _opponentDeck = deckType;
            StateHasChanged();
        };

        GameRoomService.OnGameStarted += state =>
        {
            _isOpponentSelectedDeck = false;
            _room.GameState = state;
            StateHasChanged();
        };

        GameRoomService.OnPlayerMoved += state =>
        {
            // Console.WriteLine(JsonSerializer.Serialize(state));

            _room.GameState = state;

            LastPlayedBy = state.IsPlayerTurn ? _room.GameState.Player.Name : _room.GameState.Opponent?.Name ?? "Opponent";
            LastPlayedCard = state.LastPlayedCard;

            if (LastPlayedCard is null)
            {
                if (state.IsPlayerTurn)
                {
                    _isOpponentSkipped = true;
                }
                else if (_room.GameState.Opponent is not null)
                {
                    _isPlayerSkipped = true;
                }
            }

            ShowLastPlayedCard = true;
            StateHasChanged();


            ShowLastPlayedCard = false;
            LastPlayedCard = null;



            StateHasChanged();

            if (_room.GameState.IsPlayerTurn && _room.GameState.Player.Deck.Hand.Count == 0 || _room.GameState.IsPlayerTurn && _isPlayerSkipped)
            {
                MakeMove(null).GetAwaiter();
            }


        };

        GameRoomService.OnRoundEnded += HandleRoundEnded;
        GameRoomService.OnGameEnded += HandleGameEnded;

        await GameRoomService.StartAsync();

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryString = uri.Query;
        var queryDictionary = System.Web.HttpUtility.ParseQueryString(queryString);
        var showAcceptGameForm = queryDictionary["showAcceptGameForm"];

        if (showAcceptGameForm is not null)
        {
            _showAcceptGameForm = bool.TryParse(showAcceptGameForm, out var result) && result;
        }
    }

    private async Task AcceptGame()
    {
        _showAcceptGameForm = false;
        await GameRoomService.AcceptGame(_room.Id, _room.GameState.Player.Id);
    }

    private async Task HandleDragStart(UnitRange? unitRange)
    {
        selectedRange = unitRange;
        StateHasChanged();
    }

    private async Task SelectDeck(DeckType deck)
    {
        _showSelectDeckForm = false;
        await GameRoomService.SelectDeck(_room.Id, _room.GameState.Player.Id, deck);
    }

    [JSInvokableAttribute("MoveCard")]
    public async Task MakeMove(string? cardId)
    {
        try{
            Console.WriteLine(_room.GameState.IsPlayerTurn);
            if(_room.GameState.IsPlayerTurn){
                var card = _room.GameState.Player.Deck.Hand.FirstOrDefault(c => c.Id == cardId);

                if (card is null)
                {   
                    return;
                }

                _currentPlayedCardId = cardId;

                if (card is UnitCard ucard)
                {
                    if (ucard.UnitType == UnitType.Healer)
                    {
                        _modalTitle = "Select a card to revive";
                        _modalCards = _room.GameState.Player.Deck.ReleasedCards.OfType<Card>().ToList();
                        if(_modalCards.Count == 0)
                        {
                            // await GameRoomService.MakeMove(_room.Id, _room.GameState.Player.Id, cardId, null);
                            // StateHasChanged();
                            _isErrorModalVisible = true;
                            StateHasChanged();
                            return;
                        }
                        _isModalVisible = true;

                        StateHasChanged();
                        return;
                    }

                    if (ucard.UnitType == UnitType.Spy)
                    {
                        _modalTitle = "Select an opponent card to spy";
                        _modalCards = _room.GameState.Opponent.Deck.PlayedCards
                            .Where(c => c.UnitType != UnitType.Hero)
                            .OfType<Card>()
                            .ToList();
                        if (_modalCards.Count == 0)
                        {
                            await GameRoomService.MakeMove(_room.Id, _room.GameState.Player.Id, cardId, null);
                            return;
                        }
                        _isModalVisible = true;
                        StateHasChanged();
                        return;
                    }
                    
                }
                else if (card is WeatherCard wcard)
                {
                    weatherCards.Add(wcard);              
                }

                await GameRoomService.MakeMove(_room.Id, _room.GameState.Player.Id, cardId, null);
            }
        else
            {
                Console.WriteLine("else");
                _isErrorModalVisible = true;
        }
    }
    catch (Exception e)
        {
            Console.WriteLine("catch");
            var card = _room.GameState.Player.Deck.Hand.FirstOrDefault(c => c.Id == _currentPlayedCardId);
            if (card is null) return;
            if (card is WeatherCard wcard)
            {
                weatherCards.Remove(wcard);
            }
            _isErrorModalVisible = true;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void HandleWeatherCardClick(string cardId)
    {
        var card = _room.GameState.Player.Deck.Hand.FirstOrDefault(c => c.Id == _currentPlayedCardId);
        if (card is null) return;
        if (card is WeatherCard wcard)
        {
            _isWeatherModalVisible = true;
            _weatherModalTitle = wcard?.Name;
            _modalWeatherCard.Clear();
            _modalWeatherCard.Add(wcard);
        }
        StateHasChanged();
    }

    private async Task SelectTargetCard(string targetCardId)
    {
        await GameRoomService.MakeMove(_room.Id, _room.GameState.Player.Id, _currentPlayedCardId, targetCardId);

        CloseModal();
    }

    private void CloseModal()
    {
        _isModalVisible = false;
        _modalCards.Clear();
        StateHasChanged();
    }

    private void CloseWeatherModal()
    {
        _isWeatherModalVisible = false;
        StateHasChanged();
    }

    private void HandleRoundEnded(RoundEndedDto roundEnded)
    {
        Console.WriteLine("Round ended");

        _roundWinner = roundEnded.RoundWinner;
        _showRoundEndedModal = true;

        _room.GameState = roundEnded.GameState;

        StateHasChanged();
    }

    private async void HandleGameEnded(GameEndedDto gameEnded)
    {
        _gameWinner = gameEnded.GameWinner;
        _showGameEndedModal = true;

        StateHasChanged();

        await Task.Delay(3000);

        NavigationManager.NavigateTo("/");
    }

    private void CloseRoundEndedModal()
    {
        _showRoundEndedModal = false;
        StateHasChanged();
    }

    private void CloseGameEndedModal()
    {
        _showGameEndedModal = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/game.js");

            await _module.InvokeVoidAsync("setupCardAdjustments");
            // await InitializeDragAndDrop();
        }
    }
    
    private async Task EndRound()
    {
        await GameRoomService.MakeMove(_room.Id, _room.GameState.Player.Id, null, null);
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
        {
            await _module.InvokeVoidAsync("cleanupCardAdjustments");
            await _module.DisposeAsync();
            _objectReference?.Dispose();
        }
    }
}